/*
 * Copyright (C) 2019 DiDi Inc. All Rights Reserved.
 * Authors: wenxiang@didiglobal.com
 * Description: input/output/context of Flow
 */
syntax = "proto2";

package com.didichuxing.horoscope.core;
option java_multiple_files = false;
option java_outer_classname = "FlowRuntimeMessage";

message FlowValue {
    message List {
        repeated FlowValue child = 1;
    }

    message Dict {
        map<string, FlowValue> child = 1;
    }

    oneof value {
        bytes binary = 1;
        double fractional = 2;
        int64 integral = 3;
        string text = 4;
        bool boolean = 5;
        List list = 6;
        Dict dict = 7;
    }
}

message FlowEvent {
    message Choice {
        repeated string choice = 1;
    }

    message Parent {
        required string event_id = 1;
        required string trace_id = 2;
        required string flow_name = 3;
        repeated string scope = 4;
         repeated TraceVariable variable = 5;     //  6.2, deprecated
         map<string, Choice> choice = 6;          //  6.2, deprecated
         map<string, FlowValue> experiment = 7;   //  6.2, deprecated
    }

    required string event_id = 1;
    required string trace_id = 2;
    required string flow_name = 3;
    optional int64 scheduled_timestamp = 4; // unix timestamp
    map<string, TraceVariable> argument = 6; // TODO(wenxiang): no need to use TraceVariable any more
    optional Parent parent = 8;
    optional string token = 9;               // callback token
    repeated LogTrigger trigger = 10;        // topic trigger
    optional ForwardContext forward = 11;
    optional ExperimentContext experiment = 12;
}

// TODO(wenxiang): move inside TraceVariable
message ValueReference {
    // for flow argument: @xxx
    // for local variable: xxx
    // for trace variable: $xxx
    // for temp variable: -argument_name->variable_name
    required string name = 2;

    optional string event_id = 1;
    repeated string scope = 3;
    optional string flow_name = 4;
}

message FlowInstance {

    message Experiment {
        optional string name = 1;
        optional string group = 2;
    }

    message Procedure {
        message Composite {
            required string compositor = 1;
            optional FlowValue result = 2;
            optional FlowValue argument = 3;
            optional int64 start_time = 4;
            optional int64 end_time = 5;
            optional int32 batch_size = 6 [default = 1];
        }

        message Fault {
            required string catalog = 1;
            required string message = 2;
            optional string detail = 3;
        }

        required string flow_name = 1;
        optional string flow_id = 2;
        repeated string scope = 3;
        repeated string choice = 4;
        map<string, Fault> fault = 5;
        map<string, FlowValue> argument = 6;
        map<string, Composite> composite = 7;
        map<string, FlowValue> assign = 8;
        repeated TraceVariable load = 9;
        optional int64 start_time = 10;
        optional int64 end_time = 11;
        optional Experiment experiment = 12;
        repeated string context_choice = 13;
    }

    message Topic {
        required string log_id = 1;
        required string topic_name = 2;
        optional string trace_id = 3;
        optional int64 log_timestamp = 4;
        map<string, FlowValue> field = 5;
        map<string, FlowValue> detail = 6;
    }

    optional string flow_id = 1;
    required FlowEvent event = 2; // TODO(wenxiang): should extract necessary fields out
    optional int64 start_time = 6;
    optional int64 end_time = 7;

    repeated Procedure procedure = 101;
    repeated TraceVariable update = 102;
    repeated FlowEvent schedule = 103;
    repeated string delete = 104;

    repeated Topic topic = 1000;
    repeated TokenContext token = 1001;
    repeated BackwardContext backward = 1002;
}

message TraceVariable {
    required FlowValue value = 1;
    optional ValueReference reference = 2;
    optional int64 timestamp = 3;
}

message TraceContext {
    repeated TraceVariable contexts = 1;
}

message ForwardContext {
    required string topic_name = 1;           // topic
    repeated TraceVariable variable = 2;
    repeated TraceVariable choice = 3;
    repeated TraceVariable tag = 4;
}

message BackwardContext {
    required string log_id = 1;              // &xxx
    required string topic_name = 2;
    repeated string dependency_flow = 3;
    repeated TraceVariable variable = 4;
    repeated TraceVariable choice = 5;
    repeated TraceVariable tag = 6;
}

message LogTrigger {
    required string log_id = 1;
    required string topic_name = 2;
    optional string event_id = 3;           // key flow event_id
}

message ExperimentContext {
    message Alternative {
        optional string original = 1;        // original flow
        optional string replacement = 2;     // replacement flow
        map<string, FlowValue> argument = 3;
    }
    optional string name = 1;
    optional string group = 2;
    repeated Alternative plan = 3;
    map<string, FlowValue> dependency = 4;
}

message TokenContext {
    required string token = 1;               // #xxx
    map<string, FlowValue> argument = 2;
    optional LogTrigger trigger = 3;         // trigger info of backward context
    optional ForwardContext forward = 4;     // forward context
}
