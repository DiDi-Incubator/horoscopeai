akka {
  actor {
    provider = remote
    serializers {
      proto = "akka.remote.serialization.ProtobufSerializer"
    }
    serialization-bindings {
      "com.google.protobuf.Message" = proto
    }
  }
  remote {
    enabled-transports = ["akka.remote.netty.tcp"]
    netty.tcp {
      hostname = "127.0.0.1"
      port = 2552
    }
    log-sent-messages = on
    log-received-messages = on
  }
  http {
    server {
      #默认60s
      idle-timeout = 60s
      #默认20s
      request-timeout = 60s
      #默认1024
      max-connections = 2048
    }
  }
}
horoscope {
  #当前集群的所有接入机器，端口是akka对应的端口
  cluster = []
  #zookeeper配置，用于选主信息存储和source接入源配置
  zookeeper {
    servers = "localhost:2181"
    namespace = "horoscope"
    cluster {
      name = "hna"
      vip = "127.0.0.1"
      api-port = "8062"
    }
    cluster.path = "/cluster"
    sources.path = "/sources"
  }
  #trace store采用hbase存储
  hbase {
    #hbase接入配置
    zookeeper {
      quorum = "horoscope-hbase-dev"
      port = "2181"
    }
    user {
      name = "map_traffic"
      password = "lVN9Rk7bqldUc5oHI1phQWJD2FLu1hAn"
    }
    #trace context表名
    trace-context-table = "HOROSCOPE:TRACE_CONTEXT"
    #token表名
    token-table = "HOROSCOPE:SCHEDULER_TOKEN"
    #scheduler source
    scheduler-source-table = "HOROSCOPE:SCHEDULER_SOURCE"
  }
  redis {
    host = "127.0.0.1"
    port = 6379
  }
  scheduler = {
    delay.backpress {
      permits = 1000
      timeout = 100
    }
    rocksdb = {
      path = "scheduler2552.db"
    }
  }
  rm = {
    #slaver 注册超时时间(秒)，重试1次
    register.timeout = 5
    ping = {
      #ping 的间隔时间(秒)
      interval = 10
      #ping 的timeout时间(秒)
      timeout = 35
      #ping try 的次数
      retry.attempts = 29
      #ping try 的间隔时间
      retry.interval = 1
    }
    restart = {
      #重新加入集群的重试次数
      attempts = 15
      #重新加入集群的间隔时间(秒)
      interval = 1
    }
    slot-count = 1024
    slot-batch = 64
  }
  sources = [
    {
      factory-name = "httpSource"
      source-name = "debug"
      parameter = {
        backpress {
          permits = 100
          timeout = 10
        }
      }
    },
    {
      factory-name = "batchJsonKafka"
      source-name = "s1"
      flow-name = "/root/v2/flow1"
      parameter {
        kafka = {
          servers = "10.179.24.223:9093"
          cluster-id = 95
          app-id = "appId_001485"
          password = "_twYiKJNrBCX"
          topic = "event_source"
          group = "test0713"
          max = 6
          concurrency = 1
        }
        rpc {
          type = "thrift"
          port = 6880
        }
        backpress {
          permits = 10
          timeout = 60
        }
      }
    }
  ]
}